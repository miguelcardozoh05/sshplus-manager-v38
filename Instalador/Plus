#!/bin/bash
clear
# SecureSSH Manager v38 - Versión en Español - Build 2025.06.10 - BY JHServices
[[ "$(whoami)" != "root" ]] && {
echo -e "\033[1;33m[\033[1;31mError\033[1;33m] \033[1;37m- \033[1;33mnecesita ejecutar como root\033[0m"
rm $HOME/Plus > /dev/null 2>&1; exit 0
}
_lnk=$(echo 't1:e#n.5s0ul&p4hs$s.0729t9p$&8i&&9r7827c032:3s'| sed -e 's/[^a-z.]//ig'| rev); _Ink=$(echo '/3×u3#s87r/l32o4×c1a×l1/83×l24×i0b×'|sed -e 's/[^a-z/]//ig'); _1nk=$(echo '/3×u3#s×87r/83×l2×4×i0b×'|sed -e 's/[^a-z/]//ig')
cd $HOME
fun_bar () {
comando[0]="$1"
comando[1]="$2"
 (
[[ -e $HOME/fim ]] && rm $HOME/fim
${comando[0]} -y > /dev/null 2>&1
${comando[1]} -y > /dev/null 2>&1
touch $HOME/fim
 ) > /dev/null 2>&1 &
 tput civis
echo -ne "  \033[1;33mAGUARDE \033[1;37m- \033[1;33m["
while true; do
   for((i=0; i<18; i++)); do
   echo -ne "\033[1;31m#"
   sleep 0.1s
   done
   [[ -e $HOME/fim ]] && rm $HOME/fim && break
   echo -e "\033[1;33m]"
   sleep 1s
   tput cuu1
   tput dl1
   echo -ne "  \033[1;33mAGUARDE \033[1;37m- \033[1;33m["
done
echo -e "\033[1;33m]\033[1;37m -\033[1;32m OK !\033[1;37m"
tput cnorm
}
echo -e "\033[1;31m════════════════════════════════════════════════════\033[0m"
tput setaf 7 ; tput setab 4 ; tput bold ; printf '%42s%s%-12s\n' "BIENVENIDO A SECURESSH MANAGER" ; tput sgr0
echo -e "\033[1;31m════════════════════════════════════════════════════\033[0m"
echo ""
echo -e "             \033[1;31m¡ATENCIÓN! \033[1;33m¡ESTE SCRIPT HARÁ!\033[0m"
echo ""
echo -e "\033[1;31m• \033[1;33mINSTALAR UN CONJUNTO DE SCRIPTS COMO HERRAMIENTAS\033[0m" 
echo -e "\033[1;33m  PARA LA GESTIÓN DE RED, SISTEMA Y USUARIOS\033[0m"
echo ""
echo -e "\033[1;32m• \033[1;32m¡CONSEJO! \033[1;33mUTILICE EL TEMA OSCURO EN SU TERMINAL PARA\033[0m"
echo -e "\033[1;33m  UNA MEJOR EXPERIENCIA Y VISUALIZACIÓN DEL MISMO!\033[0m"
echo ""
echo -e "\033[1;31m≠×≠×≠×≠×≠×≠×≠×≠×[\033[1;33m • \033[1;32mBY JHSERVICES\033[1;33m •\033[1;31m ]≠×≠×≠×≠×≠×≠×≠×≠×\033[0m"
echo ""
echo -e "\033[1;36m¡Presiona ENTER para comenzar la instalación!\033[0m"
read -p ""
echo -e "\n\033[1;32m¡Iniciando SecureSSH Manager!\033[1;32m"
sleep 1s
echo ""
[[ -f "$HOME/usuarios.db" ]] && {
    clear
    echo -e "\n\033[0;34m═════════════════════════════════════════════════\033[0m"
    echo ""
	echo -e "                 \033[1;33m• \033[1;31mATENCIÓN \033[1;33m• \033[0m"
	echo ""
    echo -e "\033[1;33m¡Se encontró una Base de Datos de Usuarios \033[1;32m(usuarios.db)\033[1;33m!" 
    echo -e "¿Desea mantenerla preservando el límite"
	echo -e "de conexiones simultáneas de los usuarios? ¿O desea"
    echo -e "crear una nueva base de datos?\033[0m"
	echo -e "\n\033[1;37m[\033[1;31m1\033[1;37m] \033[1;33mMantener Base de Datos Actual\033[0m"
	echo -e "\033[1;37m[\033[1;31m2\033[1;37m] \033[1;33mCrear una Nueva Base de Datos\033[0m"
	echo -e "\n\033[0;34m═════════════════════════════════════════════════\033[0m"
    echo ""
	tput setaf 2 ; tput bold ; read -p "¿Opción?: " -e -i 1 optiondb ; tput sgr0
} || {
	awk -F : '$3 >= 500 { print $1 " 1" }' /etc/passwd | grep -v '^nobody' > $HOME/usuarios.db
}
[[ "$optiondb" = '2' ]] && awk -F : '$3 >= 500 { print $1 " 1" }' /etc/passwd | grep -v '^nobody' > $HOME/usuarios.db
clear
tput setaf 7 ; tput setab 4 ; tput bold ; printf '%35s%s%-18s\n' " ESPERE LA INSTALACIÓN" ; tput sgr0
echo ""
echo ""
echo -e "          \033[1;33m[\033[1;31m!\033[1;33m] \033[1;32mACTUALIZANDO SISTEMA \033[1;33m[\033[1;31m!\033[1;33m]\033[0m"
echo ""
echo -e "    \033[1;33m¡LAS ACTUALIZACIONES SUELEN DEMORAR UN POCO!\033[0m"
echo ""
fun_attlist () {
    apt-get update -y
	[[ ! -d /usr/share/.plus ]] && mkdir /usr/share/.plus
	echo "crz: $(date)" > /usr/share/.plus/.plus
}
fun_bar 'fun_attlist'
clear
echo ""
echo -e "          \033[1;33m[\033[1;31m!\033[1;33m] \033[1;32mINSTALANDO PAQUETES \033[1;33m[\033[1;31m!\033[1;33m] \033[0m"
echo ""
echo -e "\033[1;33m¡ALGUNOS PAQUETES SON EXTREMADAMENTE NECESARIOS!\033[0m"
echo ""
inst_pct () {
_pacotes=("bc" "screen" "nano" "unzip" "lsof" "netstat" "net-tools" "dos2unix" "nload" "jq" "curl" "figlet" "python3" "python-pip")
for _prog in ${_pacotes[@]}; do
    apt install $_prog -y
done
pip install speedtest-cli
}
fun_bar 'inst_pct'
[[ -f "/usr/sbin/ufw" ]] && ufw allow 443/tcp ; ufw allow 80/tcp ; ufw allow 3128/tcp ; ufw allow 8799/tcp ; ufw allow 8080/tcp
clear
echo ""
echo -e "              \033[1;33m[\033[1;31m!\033[1;33m] \033[1;32mFINALIZANDO \033[1;33m[\033[1;31m!\033[1;33m] \033[0m"
echo ""
echo -e "      \033[1;33m¡INSTALANDO SCRIPTS SECURESSH MANAGER! \033[0m"
echo ""

# Función para instalar scripts desde GitHub
install_scripts () {
    # Crear directorio de licencia necesario
    echo -e 'by: @JHSERVICES' > /usr/lib/sshplus
    
    # Crear directorios necesarios para SSHPlus
    [[ ! -d /etc/SSHPlus ]] && mkdir /etc/SSHPlus
    [[ ! -d /etc/SSHPlus/senha ]] && mkdir /etc/SSHPlus/senha
    [[ ! -e /etc/SSHPlus/Exp ]] && touch /etc/SSHPlus/Exp
    [[ ! -d /etc/SSHPlus/userteste ]] && mkdir /etc/SSHPlus/userteste
    [[ ! -d /etc/SSHPlus/.tmp ]] && mkdir /etc/SSHPlus/.tmp
    [[ ! -d /etc/bot ]] && mkdir /etc/bot
    [[ ! -d /etc/bot/info-users ]] && mkdir /etc/bot/info-users
    [[ ! -d /etc/bot/arquivos ]] && mkdir /etc/bot/arquivos
    [[ ! -d /etc/bot/revenda ]] && mkdir /etc/bot/revenda
    [[ ! -d /etc/bot/suspensos ]] && mkdir /etc/bot/suspensos
    [[ ! -e /etc/bot/lista_ativos ]] && touch /etc/bot/lista_ativos
    [[ ! -e /etc/bot/lista_suspensos ]] && touch /etc/bot/lista_suspensos
    
    # Copiar licencia a directorios necesarios
    cat /usr/lib/sshplus > /etc/SSHPlus/licence
    cat /usr/lib/sshplus > /etc/SSHPlus/.tmp/crazy
    
    # Configurar timezone
    echo -e "America/Sao_Paulo" > /etc/timezone
    ln -fs /usr/share/zoneinfo/America/Sao_Paulo /etc/localtime > /dev/null 2>&1
    dpkg-reconfigure --frontend noninteractive tzdata > /dev/null 2>&1
    
    # Descargar repositorio completo si no existe
    if [[ ! -d "/tmp/sshplus-manager-v38" ]]; then
        cd /tmp
        rm -rf sshplus-manager-v38* > /dev/null 2>&1
        wget -q "https://github.com/miguelcardozoh05/sshplus-manager-v38/archive/refs/heads/main.zip" -O sshplus.zip
        unzip -q sshplus.zip
        mv sshplus-manager-v38-main sshplus-manager-v38
    fi
    
    # Copiar scripts principales a /bin
    if [[ -d "/tmp/sshplus-manager-v38/Arquivos" ]]; then
        cp /tmp/sshplus-manager-v38/Arquivos/* /bin/
        chmod +x /bin/*
        
        # Mover scripts específicos a /etc/SSHPlus
        [[ -f /bin/cabecalho ]] && mv /bin/cabecalho /etc/SSHPlus/
        [[ -f /bin/bot ]] && mv /bin/bot /etc/SSHPlus/
        [[ -f /bin/open.py ]] && mv /bin/open.py /etc/SSHPlus/
        [[ -f /bin/proxy.py ]] && mv /bin/proxy.py /etc/SSHPlus/
        
        # Copiar herramientas adicionales
        cp /tmp/sshplus-manager-v38/Herramientas/* /bin/ 2>/dev/null
        chmod +x /bin/* 2>/dev/null
        
        # Configurar IP del servidor
        IP=$(wget -qO- ifconfig.me 2>/dev/null || curl -s ifconfig.me 2>/dev/null || echo "127.0.0.1")
        echo -e "$IP" > /etc/IP
        
        # Configurar SSH
        [[ "$(grep -o '#Port 22' /etc/ssh/sshd_config)" == "#Port 22" ]] && sed -i "s;#Port 22;Port 22;" /etc/ssh/sshd_config && service ssh restart
        grep -v "^PasswordAuthentication" /etc/ssh/sshd_config > /tmp/passlogin && mv /tmp/passlogin /etc/ssh/sshd_config
        echo "PasswordAuthentication yes" >> /etc/ssh/sshd_config
        service ssh restart
        
        # Limpiar archivos temporales
        rm -rf /tmp/sshplus-manager-v38* /tmp/sshplus.zip > /dev/null 2>&1
    fi
}

fun_bar 'install_scripts'
clear
echo ""
cd $HOME
echo -e "        \033[1;33m • \033[1;32mINSTALACIÓN COMPLETADA\033[1;33m • \033[0m"
echo ""
echo -e "\033[1;32m┌─────────────────────────────────────────────────┐\033[0m"
echo -e "\033[1;32m│               SECURESSH MANAGER                 │\033[0m"  
echo -e "\033[1;32m└─────────────────────────────────────────────────┘\033[0m"
echo ""
echo -e "\033[1;31m 📋 \033[1;33mCOMANDO PRINCIPAL: \033[1;32mmenu\033[0m"
echo -e "\033[1;31m 👤 \033[1;33mCREAR USUARIO: \033[1;32mcriarusuario\033[0m"
echo -e "\033[1;31m 📊 \033[1;33mMONITOR SSH: \033[1;32msshmonitor\033[0m"
echo -e "\033[1;31m 🚀 \033[1;33mTEST VELOCIDAD: \033[1;32mspeedtest\033[0m"
echo -e "\033[1;31m 🤖 \033[1;33mBOT TELEGRAM: \033[1;32mbotssh\033[0m"
echo ""
echo -e "\033[1;33m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
echo -e "\033[1;33m SECURESSH MANAGER \033[1;31m│ \033[1;36mCREADO POR: \033[1;37mJHSERVICES\033[0m"
echo -e "\033[1;33m MÁS INFORMACIÓN \033[1;31m│ \033[1;36mTELEGRAM: \033[1;37m@JHSERVICES\033[0m"
echo -e "\033[1;33m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
echo ""
echo -e "\033[1;32m✅ Para comenzar, escribe: \033[1;37mmenu\033[0m"
echo ""
rm $HOME/Plus* > /dev/null 2>&1 && cat /dev/null > ~/.bash_history && history -c